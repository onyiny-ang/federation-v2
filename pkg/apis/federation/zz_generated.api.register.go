/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package federation

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	federationcommon "github.com/marun/fnord/pkg/apis/federation/common"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalFederatedCluster = builders.NewInternalResource(
		"federatedclusters",
		"FederatedCluster",
		func() runtime.Object { return &FederatedCluster{} },
		func() runtime.Object { return &FederatedClusterList{} },
	)
	InternalFederatedClusterStatus = builders.NewInternalResourceStatus(
		"federatedclusters",
		"FederatedClusterStatus",
		func() runtime.Object { return &FederatedCluster{} },
		func() runtime.Object { return &FederatedClusterList{} },
	)
	InternalFederatedConfigMap = builders.NewInternalResource(
		"federatedconfigmaps",
		"FederatedConfigMap",
		func() runtime.Object { return &FederatedConfigMap{} },
		func() runtime.Object { return &FederatedConfigMapList{} },
	)
	InternalFederatedConfigMapStatus = builders.NewInternalResourceStatus(
		"federatedconfigmaps",
		"FederatedConfigMapStatus",
		func() runtime.Object { return &FederatedConfigMap{} },
		func() runtime.Object { return &FederatedConfigMapList{} },
	)
	InternalFederatedConfigMapOverride = builders.NewInternalResource(
		"federatedconfigmapoverrides",
		"FederatedConfigMapOverride",
		func() runtime.Object { return &FederatedConfigMapOverride{} },
		func() runtime.Object { return &FederatedConfigMapOverrideList{} },
	)
	InternalFederatedConfigMapOverrideStatus = builders.NewInternalResourceStatus(
		"federatedconfigmapoverrides",
		"FederatedConfigMapOverrideStatus",
		func() runtime.Object { return &FederatedConfigMapOverride{} },
		func() runtime.Object { return &FederatedConfigMapOverrideList{} },
	)
	InternalFederatedConfigMapPlacement = builders.NewInternalResource(
		"federatedconfigmapplacements",
		"FederatedConfigMapPlacement",
		func() runtime.Object { return &FederatedConfigMapPlacement{} },
		func() runtime.Object { return &FederatedConfigMapPlacementList{} },
	)
	InternalFederatedConfigMapPlacementStatus = builders.NewInternalResourceStatus(
		"federatedconfigmapplacements",
		"FederatedConfigMapPlacementStatus",
		func() runtime.Object { return &FederatedConfigMapPlacement{} },
		func() runtime.Object { return &FederatedConfigMapPlacementList{} },
	)
	InternalFederatedNamespacePlacement = builders.NewInternalResource(
		"federatednamespaceplacements",
		"FederatedNamespacePlacement",
		func() runtime.Object { return &FederatedNamespacePlacement{} },
		func() runtime.Object { return &FederatedNamespacePlacementList{} },
	)
	InternalFederatedNamespacePlacementStatus = builders.NewInternalResourceStatus(
		"federatednamespaceplacements",
		"FederatedNamespacePlacementStatus",
		func() runtime.Object { return &FederatedNamespacePlacement{} },
		func() runtime.Object { return &FederatedNamespacePlacementList{} },
	)
	InternalFederatedReplicaSet = builders.NewInternalResource(
		"federatedreplicasets",
		"FederatedReplicaSet",
		func() runtime.Object { return &FederatedReplicaSet{} },
		func() runtime.Object { return &FederatedReplicaSetList{} },
	)
	InternalFederatedReplicaSetStatus = builders.NewInternalResourceStatus(
		"federatedreplicasets",
		"FederatedReplicaSetStatus",
		func() runtime.Object { return &FederatedReplicaSet{} },
		func() runtime.Object { return &FederatedReplicaSetList{} },
	)
	InternalFederatedReplicaSetOverride = builders.NewInternalResource(
		"federatedreplicasetoverrides",
		"FederatedReplicaSetOverride",
		func() runtime.Object { return &FederatedReplicaSetOverride{} },
		func() runtime.Object { return &FederatedReplicaSetOverrideList{} },
	)
	InternalFederatedReplicaSetOverrideStatus = builders.NewInternalResourceStatus(
		"federatedreplicasetoverrides",
		"FederatedReplicaSetOverrideStatus",
		func() runtime.Object { return &FederatedReplicaSetOverride{} },
		func() runtime.Object { return &FederatedReplicaSetOverrideList{} },
	)
	InternalFederatedReplicaSetPlacement = builders.NewInternalResource(
		"federatedreplicasetplacements",
		"FederatedReplicaSetPlacement",
		func() runtime.Object { return &FederatedReplicaSetPlacement{} },
		func() runtime.Object { return &FederatedReplicaSetPlacementList{} },
	)
	InternalFederatedReplicaSetPlacementStatus = builders.NewInternalResourceStatus(
		"federatedreplicasetplacements",
		"FederatedReplicaSetPlacementStatus",
		func() runtime.Object { return &FederatedReplicaSetPlacement{} },
		func() runtime.Object { return &FederatedReplicaSetPlacementList{} },
	)
	InternalFederatedSecret = builders.NewInternalResource(
		"federatedsecrets",
		"FederatedSecret",
		func() runtime.Object { return &FederatedSecret{} },
		func() runtime.Object { return &FederatedSecretList{} },
	)
	InternalFederatedSecretStatus = builders.NewInternalResourceStatus(
		"federatedsecrets",
		"FederatedSecretStatus",
		func() runtime.Object { return &FederatedSecret{} },
		func() runtime.Object { return &FederatedSecretList{} },
	)
	InternalFederatedSecretOverride = builders.NewInternalResource(
		"federatedsecretoverrides",
		"FederatedSecretOverride",
		func() runtime.Object { return &FederatedSecretOverride{} },
		func() runtime.Object { return &FederatedSecretOverrideList{} },
	)
	InternalFederatedSecretOverrideStatus = builders.NewInternalResourceStatus(
		"federatedsecretoverrides",
		"FederatedSecretOverrideStatus",
		func() runtime.Object { return &FederatedSecretOverride{} },
		func() runtime.Object { return &FederatedSecretOverrideList{} },
	)
	InternalFederatedSecretPlacement = builders.NewInternalResource(
		"federatedsecretplacements",
		"FederatedSecretPlacement",
		func() runtime.Object { return &FederatedSecretPlacement{} },
		func() runtime.Object { return &FederatedSecretPlacementList{} },
	)
	InternalFederatedSecretPlacementStatus = builders.NewInternalResourceStatus(
		"federatedsecretplacements",
		"FederatedSecretPlacementStatus",
		func() runtime.Object { return &FederatedSecretPlacement{} },
		func() runtime.Object { return &FederatedSecretPlacementList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("federation.k8s.io").WithKinds(
		InternalFederatedCluster,
		InternalFederatedClusterStatus,
		InternalFederatedConfigMap,
		InternalFederatedConfigMapStatus,
		InternalFederatedConfigMapOverride,
		InternalFederatedConfigMapOverrideStatus,
		InternalFederatedConfigMapPlacement,
		InternalFederatedConfigMapPlacementStatus,
		InternalFederatedNamespacePlacement,
		InternalFederatedNamespacePlacementStatus,
		InternalFederatedReplicaSet,
		InternalFederatedReplicaSetStatus,
		InternalFederatedReplicaSetOverride,
		InternalFederatedReplicaSetOverrideStatus,
		InternalFederatedReplicaSetPlacement,
		InternalFederatedReplicaSetPlacementStatus,
		InternalFederatedSecret,
		InternalFederatedSecretStatus,
		InternalFederatedSecretOverride,
		InternalFederatedSecretOverrideStatus,
		InternalFederatedSecretPlacement,
		InternalFederatedSecretPlacementStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedReplicaSetOverride struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedReplicaSetOverrideSpec
	Status FederatedReplicaSetOverrideStatus
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedConfigMapOverride struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedConfigMapOverrideSpec
	Status FederatedConfigMapOverrideStatus
}

type FederatedReplicaSetOverrideStatus struct {
}

type FederatedConfigMapOverrideStatus struct {
}

type FederatedConfigMapOverrideSpec struct {
	Overrides []FederatedConfigMapClusterOverride
}

type FederatedReplicaSetOverrideSpec struct {
	Overrides []FederatedReplicaSetClusterOverride
}

type FederatedConfigMapClusterOverride struct {
	ClusterName string
	Data        map[string]string
}

type FederatedReplicaSetClusterOverride struct {
	ClusterName string
	Replicas    *int32
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedConfigMapPlacement struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedConfigMapPlacementSpec
	Status FederatedConfigMapPlacementStatus
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedSecretPlacement struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedSecretPlacementSpec
	Status FederatedSecretPlacementStatus
}

type FederatedConfigMapPlacementStatus struct {
}

type FederatedSecretPlacementStatus struct {
}

type FederatedSecretPlacementSpec struct {
	ClusterNames []string
}

type FederatedConfigMapPlacementSpec struct {
	ClusterNames []string
}

// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedCluster struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedClusterSpec
	Status FederatedClusterStatus
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedSecret struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedSecretSpec
	Status FederatedSecretStatus
}

type FederatedClusterStatus struct {
	Conditions []ClusterCondition
	Zones      []string
	Region     string
}

type FederatedSecretStatus struct {
}

type ClusterCondition struct {
	Type               federationcommon.ClusterConditionType
	Status             corev1.ConditionStatus
	LastProbeTime      metav1.Time
	LastTransitionTime metav1.Time
	Reason             string
	Message            string
}

type FederatedSecretSpec struct {
	Template corev1.Secret
}

type FederatedClusterSpec struct {
	ClusterRef corev1.LocalObjectReference
	SecretRef  *corev1.LocalObjectReference
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedReplicaSet struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedReplicaSetSpec
	Status FederatedReplicaSetStatus
}

// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedNamespacePlacement struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedNamespacePlacementSpec
	Status FederatedNamespacePlacementStatus
}

type FederatedReplicaSetStatus struct {
}

type FederatedNamespacePlacementStatus struct {
}

type FederatedNamespacePlacementSpec struct {
	ClusterNames []string
}

type FederatedReplicaSetSpec struct {
	Template appsv1.ReplicaSet
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedConfigMap struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedConfigMapSpec
	Status FederatedConfigMapStatus
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedSecretOverride struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedSecretOverrideSpec
	Status FederatedSecretOverrideStatus
}

type FederatedConfigMapStatus struct {
}

type FederatedSecretOverrideStatus struct {
}

type FederatedSecretOverrideSpec struct {
	Overrides []FederatedSecretClusterOverride
}

type FederatedConfigMapSpec struct {
	Template corev1.ConfigMap
}

type FederatedSecretClusterOverride struct {
	ClusterName string
	Data        map[string][]byte
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedReplicaSetPlacement struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FederatedReplicaSetPlacementSpec
	Status FederatedReplicaSetPlacementStatus
}

type FederatedReplicaSetPlacementSpec struct {
	ClusterNames []string
}

type FederatedReplicaSetPlacementStatus struct {
}

//
// FederatedCluster Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedClusterStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedClusterStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedClusterList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedCluster
}

func (FederatedCluster) NewStatus() interface{} {
	return FederatedClusterStatus{}
}

func (pc *FederatedCluster) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedCluster) SetStatus(s interface{}) {
	pc.Status = s.(FederatedClusterStatus)
}

func (pc *FederatedCluster) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedCluster) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedClusterSpec)
}

func (pc *FederatedCluster) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedCluster) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedCluster) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedCluster.
// +k8s:deepcopy-gen=false
type FederatedClusterRegistry interface {
	ListFederatedClusters(ctx request.Context, options *internalversion.ListOptions) (*FederatedClusterList, error)
	GetFederatedCluster(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedCluster, error)
	CreateFederatedCluster(ctx request.Context, id *FederatedCluster) (*FederatedCluster, error)
	UpdateFederatedCluster(ctx request.Context, id *FederatedCluster) (*FederatedCluster, error)
	DeleteFederatedCluster(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedClusterRegistry(sp builders.StandardStorageProvider) FederatedClusterRegistry {
	return &storageFederatedCluster{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedCluster struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedCluster) ListFederatedClusters(ctx request.Context, options *internalversion.ListOptions) (*FederatedClusterList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedClusterList), err
}

func (s *storageFederatedCluster) GetFederatedCluster(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedCluster, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedCluster), nil
}

func (s *storageFederatedCluster) CreateFederatedCluster(ctx request.Context, object *FederatedCluster) (*FederatedCluster, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedCluster), nil
}

func (s *storageFederatedCluster) UpdateFederatedCluster(ctx request.Context, object *FederatedCluster) (*FederatedCluster, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedCluster), nil
}

func (s *storageFederatedCluster) DeleteFederatedCluster(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedConfigMap Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedConfigMapStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedConfigMapStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedConfigMapList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedConfigMap
}

func (FederatedConfigMap) NewStatus() interface{} {
	return FederatedConfigMapStatus{}
}

func (pc *FederatedConfigMap) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedConfigMap) SetStatus(s interface{}) {
	pc.Status = s.(FederatedConfigMapStatus)
}

func (pc *FederatedConfigMap) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedConfigMap) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedConfigMapSpec)
}

func (pc *FederatedConfigMap) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedConfigMap) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedConfigMap) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedConfigMap.
// +k8s:deepcopy-gen=false
type FederatedConfigMapRegistry interface {
	ListFederatedConfigMaps(ctx request.Context, options *internalversion.ListOptions) (*FederatedConfigMapList, error)
	GetFederatedConfigMap(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedConfigMap, error)
	CreateFederatedConfigMap(ctx request.Context, id *FederatedConfigMap) (*FederatedConfigMap, error)
	UpdateFederatedConfigMap(ctx request.Context, id *FederatedConfigMap) (*FederatedConfigMap, error)
	DeleteFederatedConfigMap(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedConfigMapRegistry(sp builders.StandardStorageProvider) FederatedConfigMapRegistry {
	return &storageFederatedConfigMap{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedConfigMap struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedConfigMap) ListFederatedConfigMaps(ctx request.Context, options *internalversion.ListOptions) (*FederatedConfigMapList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapList), err
}

func (s *storageFederatedConfigMap) GetFederatedConfigMap(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedConfigMap, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMap), nil
}

func (s *storageFederatedConfigMap) CreateFederatedConfigMap(ctx request.Context, object *FederatedConfigMap) (*FederatedConfigMap, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMap), nil
}

func (s *storageFederatedConfigMap) UpdateFederatedConfigMap(ctx request.Context, object *FederatedConfigMap) (*FederatedConfigMap, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMap), nil
}

func (s *storageFederatedConfigMap) DeleteFederatedConfigMap(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedConfigMapOverride Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedConfigMapOverrideStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedConfigMapOverrideStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedConfigMapOverrideList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedConfigMapOverride
}

func (FederatedConfigMapOverride) NewStatus() interface{} {
	return FederatedConfigMapOverrideStatus{}
}

func (pc *FederatedConfigMapOverride) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedConfigMapOverride) SetStatus(s interface{}) {
	pc.Status = s.(FederatedConfigMapOverrideStatus)
}

func (pc *FederatedConfigMapOverride) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedConfigMapOverride) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedConfigMapOverrideSpec)
}

func (pc *FederatedConfigMapOverride) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedConfigMapOverride) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedConfigMapOverride) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedConfigMapOverride.
// +k8s:deepcopy-gen=false
type FederatedConfigMapOverrideRegistry interface {
	ListFederatedConfigMapOverrides(ctx request.Context, options *internalversion.ListOptions) (*FederatedConfigMapOverrideList, error)
	GetFederatedConfigMapOverride(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedConfigMapOverride, error)
	CreateFederatedConfigMapOverride(ctx request.Context, id *FederatedConfigMapOverride) (*FederatedConfigMapOverride, error)
	UpdateFederatedConfigMapOverride(ctx request.Context, id *FederatedConfigMapOverride) (*FederatedConfigMapOverride, error)
	DeleteFederatedConfigMapOverride(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedConfigMapOverrideRegistry(sp builders.StandardStorageProvider) FederatedConfigMapOverrideRegistry {
	return &storageFederatedConfigMapOverride{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedConfigMapOverride struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedConfigMapOverride) ListFederatedConfigMapOverrides(ctx request.Context, options *internalversion.ListOptions) (*FederatedConfigMapOverrideList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapOverrideList), err
}

func (s *storageFederatedConfigMapOverride) GetFederatedConfigMapOverride(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedConfigMapOverride, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapOverride), nil
}

func (s *storageFederatedConfigMapOverride) CreateFederatedConfigMapOverride(ctx request.Context, object *FederatedConfigMapOverride) (*FederatedConfigMapOverride, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapOverride), nil
}

func (s *storageFederatedConfigMapOverride) UpdateFederatedConfigMapOverride(ctx request.Context, object *FederatedConfigMapOverride) (*FederatedConfigMapOverride, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapOverride), nil
}

func (s *storageFederatedConfigMapOverride) DeleteFederatedConfigMapOverride(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedConfigMapPlacement Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedConfigMapPlacementStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedConfigMapPlacementStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedConfigMapPlacementList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedConfigMapPlacement
}

func (FederatedConfigMapPlacement) NewStatus() interface{} {
	return FederatedConfigMapPlacementStatus{}
}

func (pc *FederatedConfigMapPlacement) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedConfigMapPlacement) SetStatus(s interface{}) {
	pc.Status = s.(FederatedConfigMapPlacementStatus)
}

func (pc *FederatedConfigMapPlacement) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedConfigMapPlacement) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedConfigMapPlacementSpec)
}

func (pc *FederatedConfigMapPlacement) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedConfigMapPlacement) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedConfigMapPlacement) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedConfigMapPlacement.
// +k8s:deepcopy-gen=false
type FederatedConfigMapPlacementRegistry interface {
	ListFederatedConfigMapPlacements(ctx request.Context, options *internalversion.ListOptions) (*FederatedConfigMapPlacementList, error)
	GetFederatedConfigMapPlacement(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedConfigMapPlacement, error)
	CreateFederatedConfigMapPlacement(ctx request.Context, id *FederatedConfigMapPlacement) (*FederatedConfigMapPlacement, error)
	UpdateFederatedConfigMapPlacement(ctx request.Context, id *FederatedConfigMapPlacement) (*FederatedConfigMapPlacement, error)
	DeleteFederatedConfigMapPlacement(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedConfigMapPlacementRegistry(sp builders.StandardStorageProvider) FederatedConfigMapPlacementRegistry {
	return &storageFederatedConfigMapPlacement{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedConfigMapPlacement struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedConfigMapPlacement) ListFederatedConfigMapPlacements(ctx request.Context, options *internalversion.ListOptions) (*FederatedConfigMapPlacementList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapPlacementList), err
}

func (s *storageFederatedConfigMapPlacement) GetFederatedConfigMapPlacement(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedConfigMapPlacement, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapPlacement), nil
}

func (s *storageFederatedConfigMapPlacement) CreateFederatedConfigMapPlacement(ctx request.Context, object *FederatedConfigMapPlacement) (*FederatedConfigMapPlacement, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapPlacement), nil
}

func (s *storageFederatedConfigMapPlacement) UpdateFederatedConfigMapPlacement(ctx request.Context, object *FederatedConfigMapPlacement) (*FederatedConfigMapPlacement, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedConfigMapPlacement), nil
}

func (s *storageFederatedConfigMapPlacement) DeleteFederatedConfigMapPlacement(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedNamespacePlacement Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedNamespacePlacementStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedNamespacePlacementStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedNamespacePlacementList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedNamespacePlacement
}

func (FederatedNamespacePlacement) NewStatus() interface{} {
	return FederatedNamespacePlacementStatus{}
}

func (pc *FederatedNamespacePlacement) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedNamespacePlacement) SetStatus(s interface{}) {
	pc.Status = s.(FederatedNamespacePlacementStatus)
}

func (pc *FederatedNamespacePlacement) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedNamespacePlacement) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedNamespacePlacementSpec)
}

func (pc *FederatedNamespacePlacement) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedNamespacePlacement) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedNamespacePlacement) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedNamespacePlacement.
// +k8s:deepcopy-gen=false
type FederatedNamespacePlacementRegistry interface {
	ListFederatedNamespacePlacements(ctx request.Context, options *internalversion.ListOptions) (*FederatedNamespacePlacementList, error)
	GetFederatedNamespacePlacement(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedNamespacePlacement, error)
	CreateFederatedNamespacePlacement(ctx request.Context, id *FederatedNamespacePlacement) (*FederatedNamespacePlacement, error)
	UpdateFederatedNamespacePlacement(ctx request.Context, id *FederatedNamespacePlacement) (*FederatedNamespacePlacement, error)
	DeleteFederatedNamespacePlacement(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedNamespacePlacementRegistry(sp builders.StandardStorageProvider) FederatedNamespacePlacementRegistry {
	return &storageFederatedNamespacePlacement{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedNamespacePlacement struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedNamespacePlacement) ListFederatedNamespacePlacements(ctx request.Context, options *internalversion.ListOptions) (*FederatedNamespacePlacementList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedNamespacePlacementList), err
}

func (s *storageFederatedNamespacePlacement) GetFederatedNamespacePlacement(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedNamespacePlacement, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedNamespacePlacement), nil
}

func (s *storageFederatedNamespacePlacement) CreateFederatedNamespacePlacement(ctx request.Context, object *FederatedNamespacePlacement) (*FederatedNamespacePlacement, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedNamespacePlacement), nil
}

func (s *storageFederatedNamespacePlacement) UpdateFederatedNamespacePlacement(ctx request.Context, object *FederatedNamespacePlacement) (*FederatedNamespacePlacement, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedNamespacePlacement), nil
}

func (s *storageFederatedNamespacePlacement) DeleteFederatedNamespacePlacement(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedReplicaSet Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedReplicaSetStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedReplicaSetStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedReplicaSetList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedReplicaSet
}

func (FederatedReplicaSet) NewStatus() interface{} {
	return FederatedReplicaSetStatus{}
}

func (pc *FederatedReplicaSet) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedReplicaSet) SetStatus(s interface{}) {
	pc.Status = s.(FederatedReplicaSetStatus)
}

func (pc *FederatedReplicaSet) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedReplicaSet) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedReplicaSetSpec)
}

func (pc *FederatedReplicaSet) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedReplicaSet) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedReplicaSet) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedReplicaSet.
// +k8s:deepcopy-gen=false
type FederatedReplicaSetRegistry interface {
	ListFederatedReplicaSets(ctx request.Context, options *internalversion.ListOptions) (*FederatedReplicaSetList, error)
	GetFederatedReplicaSet(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedReplicaSet, error)
	CreateFederatedReplicaSet(ctx request.Context, id *FederatedReplicaSet) (*FederatedReplicaSet, error)
	UpdateFederatedReplicaSet(ctx request.Context, id *FederatedReplicaSet) (*FederatedReplicaSet, error)
	DeleteFederatedReplicaSet(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedReplicaSetRegistry(sp builders.StandardStorageProvider) FederatedReplicaSetRegistry {
	return &storageFederatedReplicaSet{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedReplicaSet struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedReplicaSet) ListFederatedReplicaSets(ctx request.Context, options *internalversion.ListOptions) (*FederatedReplicaSetList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetList), err
}

func (s *storageFederatedReplicaSet) GetFederatedReplicaSet(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedReplicaSet, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSet), nil
}

func (s *storageFederatedReplicaSet) CreateFederatedReplicaSet(ctx request.Context, object *FederatedReplicaSet) (*FederatedReplicaSet, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSet), nil
}

func (s *storageFederatedReplicaSet) UpdateFederatedReplicaSet(ctx request.Context, object *FederatedReplicaSet) (*FederatedReplicaSet, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSet), nil
}

func (s *storageFederatedReplicaSet) DeleteFederatedReplicaSet(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedReplicaSetOverride Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedReplicaSetOverrideStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedReplicaSetOverrideStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedReplicaSetOverrideList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedReplicaSetOverride
}

func (FederatedReplicaSetOverride) NewStatus() interface{} {
	return FederatedReplicaSetOverrideStatus{}
}

func (pc *FederatedReplicaSetOverride) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedReplicaSetOverride) SetStatus(s interface{}) {
	pc.Status = s.(FederatedReplicaSetOverrideStatus)
}

func (pc *FederatedReplicaSetOverride) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedReplicaSetOverride) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedReplicaSetOverrideSpec)
}

func (pc *FederatedReplicaSetOverride) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedReplicaSetOverride) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedReplicaSetOverride) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedReplicaSetOverride.
// +k8s:deepcopy-gen=false
type FederatedReplicaSetOverrideRegistry interface {
	ListFederatedReplicaSetOverrides(ctx request.Context, options *internalversion.ListOptions) (*FederatedReplicaSetOverrideList, error)
	GetFederatedReplicaSetOverride(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedReplicaSetOverride, error)
	CreateFederatedReplicaSetOverride(ctx request.Context, id *FederatedReplicaSetOverride) (*FederatedReplicaSetOverride, error)
	UpdateFederatedReplicaSetOverride(ctx request.Context, id *FederatedReplicaSetOverride) (*FederatedReplicaSetOverride, error)
	DeleteFederatedReplicaSetOverride(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedReplicaSetOverrideRegistry(sp builders.StandardStorageProvider) FederatedReplicaSetOverrideRegistry {
	return &storageFederatedReplicaSetOverride{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedReplicaSetOverride struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedReplicaSetOverride) ListFederatedReplicaSetOverrides(ctx request.Context, options *internalversion.ListOptions) (*FederatedReplicaSetOverrideList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetOverrideList), err
}

func (s *storageFederatedReplicaSetOverride) GetFederatedReplicaSetOverride(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedReplicaSetOverride, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetOverride), nil
}

func (s *storageFederatedReplicaSetOverride) CreateFederatedReplicaSetOverride(ctx request.Context, object *FederatedReplicaSetOverride) (*FederatedReplicaSetOverride, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetOverride), nil
}

func (s *storageFederatedReplicaSetOverride) UpdateFederatedReplicaSetOverride(ctx request.Context, object *FederatedReplicaSetOverride) (*FederatedReplicaSetOverride, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetOverride), nil
}

func (s *storageFederatedReplicaSetOverride) DeleteFederatedReplicaSetOverride(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedReplicaSetPlacement Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedReplicaSetPlacementStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedReplicaSetPlacementStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedReplicaSetPlacementList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedReplicaSetPlacement
}

func (FederatedReplicaSetPlacement) NewStatus() interface{} {
	return FederatedReplicaSetPlacementStatus{}
}

func (pc *FederatedReplicaSetPlacement) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedReplicaSetPlacement) SetStatus(s interface{}) {
	pc.Status = s.(FederatedReplicaSetPlacementStatus)
}

func (pc *FederatedReplicaSetPlacement) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedReplicaSetPlacement) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedReplicaSetPlacementSpec)
}

func (pc *FederatedReplicaSetPlacement) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedReplicaSetPlacement) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedReplicaSetPlacement) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedReplicaSetPlacement.
// +k8s:deepcopy-gen=false
type FederatedReplicaSetPlacementRegistry interface {
	ListFederatedReplicaSetPlacements(ctx request.Context, options *internalversion.ListOptions) (*FederatedReplicaSetPlacementList, error)
	GetFederatedReplicaSetPlacement(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedReplicaSetPlacement, error)
	CreateFederatedReplicaSetPlacement(ctx request.Context, id *FederatedReplicaSetPlacement) (*FederatedReplicaSetPlacement, error)
	UpdateFederatedReplicaSetPlacement(ctx request.Context, id *FederatedReplicaSetPlacement) (*FederatedReplicaSetPlacement, error)
	DeleteFederatedReplicaSetPlacement(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedReplicaSetPlacementRegistry(sp builders.StandardStorageProvider) FederatedReplicaSetPlacementRegistry {
	return &storageFederatedReplicaSetPlacement{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedReplicaSetPlacement struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedReplicaSetPlacement) ListFederatedReplicaSetPlacements(ctx request.Context, options *internalversion.ListOptions) (*FederatedReplicaSetPlacementList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetPlacementList), err
}

func (s *storageFederatedReplicaSetPlacement) GetFederatedReplicaSetPlacement(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedReplicaSetPlacement, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetPlacement), nil
}

func (s *storageFederatedReplicaSetPlacement) CreateFederatedReplicaSetPlacement(ctx request.Context, object *FederatedReplicaSetPlacement) (*FederatedReplicaSetPlacement, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetPlacement), nil
}

func (s *storageFederatedReplicaSetPlacement) UpdateFederatedReplicaSetPlacement(ctx request.Context, object *FederatedReplicaSetPlacement) (*FederatedReplicaSetPlacement, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedReplicaSetPlacement), nil
}

func (s *storageFederatedReplicaSetPlacement) DeleteFederatedReplicaSetPlacement(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedSecret Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedSecretStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedSecretStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedSecretList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedSecret
}

func (FederatedSecret) NewStatus() interface{} {
	return FederatedSecretStatus{}
}

func (pc *FederatedSecret) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedSecret) SetStatus(s interface{}) {
	pc.Status = s.(FederatedSecretStatus)
}

func (pc *FederatedSecret) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedSecret) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedSecretSpec)
}

func (pc *FederatedSecret) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedSecret) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedSecret) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedSecret.
// +k8s:deepcopy-gen=false
type FederatedSecretRegistry interface {
	ListFederatedSecrets(ctx request.Context, options *internalversion.ListOptions) (*FederatedSecretList, error)
	GetFederatedSecret(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedSecret, error)
	CreateFederatedSecret(ctx request.Context, id *FederatedSecret) (*FederatedSecret, error)
	UpdateFederatedSecret(ctx request.Context, id *FederatedSecret) (*FederatedSecret, error)
	DeleteFederatedSecret(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedSecretRegistry(sp builders.StandardStorageProvider) FederatedSecretRegistry {
	return &storageFederatedSecret{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedSecret struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedSecret) ListFederatedSecrets(ctx request.Context, options *internalversion.ListOptions) (*FederatedSecretList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretList), err
}

func (s *storageFederatedSecret) GetFederatedSecret(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedSecret, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecret), nil
}

func (s *storageFederatedSecret) CreateFederatedSecret(ctx request.Context, object *FederatedSecret) (*FederatedSecret, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecret), nil
}

func (s *storageFederatedSecret) UpdateFederatedSecret(ctx request.Context, object *FederatedSecret) (*FederatedSecret, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecret), nil
}

func (s *storageFederatedSecret) DeleteFederatedSecret(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedSecretOverride Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedSecretOverrideStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedSecretOverrideStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedSecretOverrideList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedSecretOverride
}

func (FederatedSecretOverride) NewStatus() interface{} {
	return FederatedSecretOverrideStatus{}
}

func (pc *FederatedSecretOverride) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedSecretOverride) SetStatus(s interface{}) {
	pc.Status = s.(FederatedSecretOverrideStatus)
}

func (pc *FederatedSecretOverride) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedSecretOverride) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedSecretOverrideSpec)
}

func (pc *FederatedSecretOverride) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedSecretOverride) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedSecretOverride) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedSecretOverride.
// +k8s:deepcopy-gen=false
type FederatedSecretOverrideRegistry interface {
	ListFederatedSecretOverrides(ctx request.Context, options *internalversion.ListOptions) (*FederatedSecretOverrideList, error)
	GetFederatedSecretOverride(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedSecretOverride, error)
	CreateFederatedSecretOverride(ctx request.Context, id *FederatedSecretOverride) (*FederatedSecretOverride, error)
	UpdateFederatedSecretOverride(ctx request.Context, id *FederatedSecretOverride) (*FederatedSecretOverride, error)
	DeleteFederatedSecretOverride(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedSecretOverrideRegistry(sp builders.StandardStorageProvider) FederatedSecretOverrideRegistry {
	return &storageFederatedSecretOverride{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedSecretOverride struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedSecretOverride) ListFederatedSecretOverrides(ctx request.Context, options *internalversion.ListOptions) (*FederatedSecretOverrideList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretOverrideList), err
}

func (s *storageFederatedSecretOverride) GetFederatedSecretOverride(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedSecretOverride, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretOverride), nil
}

func (s *storageFederatedSecretOverride) CreateFederatedSecretOverride(ctx request.Context, object *FederatedSecretOverride) (*FederatedSecretOverride, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretOverride), nil
}

func (s *storageFederatedSecretOverride) UpdateFederatedSecretOverride(ctx request.Context, object *FederatedSecretOverride) (*FederatedSecretOverride, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretOverride), nil
}

func (s *storageFederatedSecretOverride) DeleteFederatedSecretOverride(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// FederatedSecretPlacement Functions and Structs
//
// +k8s:deepcopy-gen=false
type FederatedSecretPlacementStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FederatedSecretPlacementStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FederatedSecretPlacementList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FederatedSecretPlacement
}

func (FederatedSecretPlacement) NewStatus() interface{} {
	return FederatedSecretPlacementStatus{}
}

func (pc *FederatedSecretPlacement) GetStatus() interface{} {
	return pc.Status
}

func (pc *FederatedSecretPlacement) SetStatus(s interface{}) {
	pc.Status = s.(FederatedSecretPlacementStatus)
}

func (pc *FederatedSecretPlacement) GetSpec() interface{} {
	return pc.Spec
}

func (pc *FederatedSecretPlacement) SetSpec(s interface{}) {
	pc.Spec = s.(FederatedSecretPlacementSpec)
}

func (pc *FederatedSecretPlacement) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *FederatedSecretPlacement) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc FederatedSecretPlacement) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store FederatedSecretPlacement.
// +k8s:deepcopy-gen=false
type FederatedSecretPlacementRegistry interface {
	ListFederatedSecretPlacements(ctx request.Context, options *internalversion.ListOptions) (*FederatedSecretPlacementList, error)
	GetFederatedSecretPlacement(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedSecretPlacement, error)
	CreateFederatedSecretPlacement(ctx request.Context, id *FederatedSecretPlacement) (*FederatedSecretPlacement, error)
	UpdateFederatedSecretPlacement(ctx request.Context, id *FederatedSecretPlacement) (*FederatedSecretPlacement, error)
	DeleteFederatedSecretPlacement(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFederatedSecretPlacementRegistry(sp builders.StandardStorageProvider) FederatedSecretPlacementRegistry {
	return &storageFederatedSecretPlacement{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFederatedSecretPlacement struct {
	builders.StandardStorageProvider
}

func (s *storageFederatedSecretPlacement) ListFederatedSecretPlacements(ctx request.Context, options *internalversion.ListOptions) (*FederatedSecretPlacementList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretPlacementList), err
}

func (s *storageFederatedSecretPlacement) GetFederatedSecretPlacement(ctx request.Context, id string, options *metav1.GetOptions) (*FederatedSecretPlacement, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretPlacement), nil
}

func (s *storageFederatedSecretPlacement) CreateFederatedSecretPlacement(ctx request.Context, object *FederatedSecretPlacement) (*FederatedSecretPlacement, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretPlacement), nil
}

func (s *storageFederatedSecretPlacement) UpdateFederatedSecretPlacement(ctx request.Context, object *FederatedSecretPlacement) (*FederatedSecretPlacement, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*FederatedSecretPlacement), nil
}

func (s *storageFederatedSecretPlacement) DeleteFederatedSecretPlacement(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
